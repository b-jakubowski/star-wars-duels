{"version":3,"sources":["images/duel-pic.jpg","images/starships-pic.jpg","images/millennium-falcon-011.jpg","images/stormtrooper.png","images/starship3.png","images/mandalorian.png","types/types.ts","components/Layout.tsx","components/ChooseDuelCard.tsx","screens/Homepage.tsx","components/ContestantCard.tsx","hooks/useContestants.ts","helpers/isStarshipsDuel.ts","screens/Duel.tsx","helpers/getRandomNumber.ts","screens/PageNotFound.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","ContestantType","DuelUnit","useStyles","makeStyles","container","padding","Layout","children","classes","Container","className","maxWidth","link","textDecoration","root","marginTop","media","height","title","textAlign","ChooseDuelCard","background","route","to","Card","CardContent","CardHeader","data-testid","CardMedia","image","Homepage","duelPic","starshipsPic","card","content","display","alignItems","flexDirection","width","img","ContestantCard","name","unit","src","alt","Typography","color","mapContestant","type","data","filter","d","crew","mass","map","starship","hero","getContestants","a","contestantType","fetch","response","json","results","contestants","next","console","error","useContestants","useState","setContestants","loading","setLoading","useEffect","then","res","catch","finally","isStarshipsDuel","getRandomContestant","num","randomContestantsNumber","length","Math","floor","random","getRandomPlayers","player1","player2","Duel","players","setPlayers","loadingPlayers","setLoadingPlayers","player1Points","setPlayer1Points","player2Points","setPlayer2Points","winner","setWinner","playerUnit","CREW","MASS","image1","starship1","hero1","image2","starship2","hero2","Box","justifyContent","CircularProgress","variant","component","Grid","spacing","item","xs","md","Button","onClick","PageNotFound","App","exact","path","HEROES","STARSHIPS","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.93d1e492.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/duel-pic.266338eb.jpg\";","module.exports = __webpack_public_path__ + \"static/media/starships-pic.a02e14eb.jpg\";","module.exports = __webpack_public_path__ + \"static/media/millennium-falcon-011.3e98ee67.jpg\";","module.exports = __webpack_public_path__ + \"static/media/stormtrooper.adcf3351.png\";","module.exports = __webpack_public_path__ + \"static/media/starship3.48882771.png\";","module.exports = __webpack_public_path__ + \"static/media/mandalorian.d2b278cf.png\";","export interface DuelProps {\n\ttype: ContestantType;\n}\n\nexport enum ContestantType {\n\tSTARSHIPS = 'starships',\n\tHEROES = 'heroes',\n}\n\nexport enum DuelUnit {\n\tCREW = 'crew',\n\tMASS = 'mass',\n}\n\nexport interface Contestant {\n\tname: string;\n\t[DuelUnit.MASS]?: number | string;\n\t[DuelUnit.CREW]?: number | string;\n}\n","import React from 'react';\nimport { makeStyles, Container } from '@material-ui/core';\n\nconst useStyles = makeStyles(() => ({\n\tcontainer: {\n\t\tpadding: '2rem',\n\t},\n}));\n\nconst Layout: React.FC = ({ children }) => {\n\tconst classes = useStyles();\n\n\treturn (\n\t\t<Container className={classes.container} maxWidth=\"md\">\n\t\t\t{children}\n\t\t</Container>\n\t);\n};\n\nexport default Layout;\n","import React from 'react';\nimport { makeStyles, Card, CardContent, CardHeader, CardMedia } from '@material-ui/core';\nimport { Link } from 'react-router-dom';\n\ninterface ChooseDuelCardProps {\n\ttitle: string;\n\tbackground: string;\n\troute: string;\n}\n\nconst useStyles = makeStyles({\n\tlink: {\n\t\ttextDecoration: 'none',\n\t},\n\troot: {\n\t\tmarginTop: 30,\n\t},\n\tmedia: {\n\t\theight: 250,\n\t},\n\ttitle: {\n\t\ttextAlign: 'center',\n\t},\n});\n\nconst ChooseDuelCard: React.FC<ChooseDuelCardProps> = ({ title, background, route }: ChooseDuelCardProps) => {\n\tconst classes = useStyles();\n\n\treturn (\n\t\t<Link className={classes.link} to={route}>\n\t\t\t<Card className={classes.root}>\n\t\t\t\t<CardContent>\n\t\t\t\t\t<CardHeader data-testid=\"card-title\" className={classes.title} title={title} />\n\t\t\t\t\t<CardMedia data-testid=\"card-img\" className={classes.media} image={background} />\n\t\t\t\t</CardContent>\n\t\t\t</Card>\n\t\t</Link>\n\t);\n};\n\nexport default ChooseDuelCard;\n","import React from 'react';\nimport Layout from '../components/Layout';\nimport ChooseDuelCard from '../components/ChooseDuelCard';\nimport duelPic from '../images/duel-pic.jpg';\nimport starshipsPic from '../images/starships-pic.jpg';\n\nconst Homepage: React.FC = () => (\n\t<Layout>\n\t\t<ChooseDuelCard route=\"/heroes\" title=\"Hero vs. Hero\" background={duelPic} />\n\t\t<ChooseDuelCard route=\"/starships\" title=\"Starship vs. Starship\" background={starshipsPic} />\n\t</Layout>\n);\n\nexport default Homepage;\n","import React from 'react';\nimport { Card, CardContent, CardHeader, makeStyles, Typography } from '@material-ui/core';\n\ninterface ContestantCardProps {\n\tname: string;\n\tunit: string;\n\timage: string;\n}\n\nconst useStyles = makeStyles({\n\tlink: {\n\t\ttextDecoration: 'none',\n\t},\n\tcard: {\n\t\tmarginTop: 36,\n\t},\n\tcontent: {\n\t\tdisplay: 'flex',\n\t\talignItems: 'center',\n\t\tflexDirection: 'column',\n\t\twidth: '100%',\n\t},\n\timg: {\n\t\theight: 220,\n\t\twidth: 'auto',\n\t},\n\ttitle: {\n\t\ttextAlign: 'center',\n\t},\n});\n\nconst ContestantCard: React.FC<ContestantCardProps> = ({ name, unit, image }: ContestantCardProps) => {\n\tconst classes = useStyles();\n\n\treturn (\n\t\t<Card className={classes.card}>\n\t\t\t<CardContent className={classes.content}>\n\t\t\t\t<CardHeader data-testid=\"contestant-card-title\" className={classes.title} title={name} />\n\t\t\t\t<img className={classes.img} src={image} alt={image} />\n\t\t\t\t<Typography data-testid=\"contestant-card-unit\" color=\"textSecondary\">\n\t\t\t\t\t{unit}\n\t\t\t\t</Typography>\n\t\t\t</CardContent>\n\t\t</Card>\n\t);\n};\n\nexport default ContestantCard;\n","import { useEffect, useState } from 'react';\nimport { Contestant, ContestantType } from '../types/types';\n\nconst isStarshipsDuel = (contestantType: string) => contestantType === 'starships';\n\nconst mapContestant = (type: ContestantType, data: Contestant[]) =>\n\tdata\n\t\t.filter(d => d.crew !== 'unknown' && d.mass !== 'unknown')\n\t\t.map((d: Contestant) => {\n\t\t\tconst starship = {\n\t\t\t\tname: d.name,\n\t\t\t\tcrew: d.crew && +d.crew,\n\t\t\t};\n\t\t\tconst hero = {\n\t\t\t\tname: d.name,\n\t\t\t\tmass: d.mass && +d.mass,\n\t\t\t};\n\n\t\t\treturn isStarshipsDuel(type) ? starship : hero;\n\t\t});\n\nconst getContestants = async (type: ContestantType) => {\n\tconst contestantType = type === 'heroes' ? 'people' : 'starships';\n\n\ttry {\n\t\tlet response = await fetch('https://swapi.co/api/' + contestantType);\n\t\tlet results = await response.json();\n\n\t\tlet contestants: Contestant[] = mapContestant(type, results.results);\n\n\t\twhile (results.next) {\n\t\t\tresponse = await fetch(results.next);\n\t\t\tresults = (await response.json()) as { results: Contestant[] };\n\n\t\t\tcontestants = [...contestants, ...mapContestant(type, results.results)] as Contestant[];\n\t\t}\n\t\treturn contestants;\n\t} catch (e) {\n\t\tconsole.error(e);\n\t}\n};\n\nconst useContestants = (contestantType: ContestantType) => {\n\tconst [contestants, setContestants] = useState<Contestant[]>([]);\n\tconst [loading, setLoading] = useState(true);\n\n\tuseEffect(() => {\n\t\tgetContestants(contestantType)\n\t\t\t.then((res: any) => setContestants(res))\n\t\t\t.catch()\n\t\t\t.finally(() => setLoading(false));\n\t}, [contestantType]);\n\n\treturn [contestants, loading];\n};\n\nexport default useContestants;\n","import { ContestantType } from '../types/types';\n\nexport const isStarshipsDuel = (contestantType: ContestantType) => contestantType === 'starships';\n","// @ts-nocheck\nimport React, { useEffect, useState } from 'react';\nimport { Box, Button, CircularProgress, Grid, Typography } from '@material-ui/core';\nimport Layout from '../components/Layout';\nimport ContestantCard from '../components/ContestantCard';\nimport useContestants from '../hooks/useContestants';\nimport { getRandomNumber } from '../helpers/getRandomNumber';\nimport starship1 from '../images/millennium-falcon-011.jpg';\nimport hero1 from '../images/stormtrooper.png';\nimport starship2 from '../images/starship3.png';\nimport hero2 from '../images/mandalorian.png';\nimport { isStarshipsDuel } from '../helpers/isStarshipsDuel';\nimport { Contestant, ContestantType, DuelProps, DuelUnit } from '../types/types';\n\nconst getRandomContestant = (contestantType: ContestantType, contestants: Contestant[]) => {\n\tconst randomContestantsNumber = getRandomNumber(contestants.length);\n\n\treturn isStarshipsDuel(contestantType)\n\t\t? {\n\t\t\t\tname: contestants[randomContestantsNumber].name,\n\t\t\t\tcrew: contestants[randomContestantsNumber].crew,\n\t\t  }\n\t\t: {\n\t\t\t\tname: contestants[randomContestantsNumber].name,\n\t\t\t\tmass: contestants[randomContestantsNumber].mass,\n\t\t  };\n};\n\nconst getRandomPlayers = (contestants: Contestant[], type: ContestantType) => {\n\tconst player1 = getRandomContestant(type, contestants);\n\tlet player2: Contestant = getRandomContestant(type, contestants);\n\n\tif (player1.name === player2.name) {\n\t\tplayer2 = { ...player2, ...getRandomContestant(type, contestants) };\n\t}\n\n\treturn { player1, player2 };\n};\n\nconst Duel: React.FC<DuelProps> = ({ type }: DuelProps) => {\n\tconst [contestants, loading] = useContestants(type);\n\tconst [players, setPlayers] = useState<{ player1?: Contestant; player2?: Contestant }>({});\n\tconst [loadingPlayers, setLoadingPlayers] = useState(true);\n\tconst [player1Points, setPlayer1Points] = useState<number>(0);\n\tconst [player2Points, setPlayer2Points] = useState<number>(0);\n\tconst [winner, setWinner] = useState('');\n\n\tconst playerUnit = isStarshipsDuel(type) ? DuelUnit.CREW : DuelUnit.MASS;\n\tconst image1 = isStarshipsDuel(type) ? starship1 : hero1;\n\tconst image2 = isStarshipsDuel(type) ? starship2 : hero2;\n\n\tuseEffect(() => {\n\t\tsetLoadingPlayers(true);\n\n\t\tif (!loading) {\n\t\t\tsetPlayers(getRandomPlayers(contestants, type));\n\t\t\tsetLoadingPlayers(false);\n\t\t}\n\t}, [loading, contestants, type]);\n\n\tuseEffect(() => {\n\t\tif (!(loadingPlayers || loading)) {\n\t\t\tconst { player1, player2 } = players;\n\n\t\t\tif (player1[playerUnit] > player2[playerUnit]) {\n\t\t\t\tsetPlayer1Points(player1Points + 1);\n\t\t\t\tsetWinner(player1.name);\n\t\t\t} else if (player1[playerUnit] < player2[playerUnit]) {\n\t\t\t\tsetPlayer2Points(player2Points + 1);\n\t\t\t\tsetWinner(player2.name);\n\t\t\t} else {\n\t\t\t\tsetWinner('draw!');\n\t\t\t}\n\t\t}\n\t\t// eslint-disable-next-line react-hooks/exhaustive-deps\n\t}, [loadingPlayers, loading, players]);\n\n\treturn (\n\t\t<Layout>\n\t\t\t{loadingPlayers || loading ? (\n\t\t\t\t<Box display=\"flex\" justifyContent=\"center\">\n\t\t\t\t\t<CircularProgress />\n\t\t\t\t</Box>\n\t\t\t) : (\n\t\t\t\t<>\n\t\t\t\t\t{players.player1 && players.player2 && (\n\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t<Box display=\"flex\" justifyContent=\"center\">\n\t\t\t\t\t\t\t\t<Typography variant=\"h3\" component=\"h5\">\n\t\t\t\t\t\t\t\t\tWinner: {winner}\n\t\t\t\t\t\t\t\t</Typography>\n\t\t\t\t\t\t\t</Box>\n\t\t\t\t\t\t\t<Grid container spacing={2}>\n\t\t\t\t\t\t\t\t<Grid item xs={12} md={6}>\n\t\t\t\t\t\t\t\t\t<ContestantCard\n\t\t\t\t\t\t\t\t\t\tname={players.player1.name}\n\t\t\t\t\t\t\t\t\t\tunit={`${playerUnit}: ${players.player1[playerUnit]}`}\n\t\t\t\t\t\t\t\t\t\timage={image1}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t\t\t<Grid item xs={12} md={6}>\n\t\t\t\t\t\t\t\t\t<ContestantCard\n\t\t\t\t\t\t\t\t\t\tname={players.player2.name}\n\t\t\t\t\t\t\t\t\t\tunit={`${playerUnit}: ${players.player2[playerUnit]}`}\n\t\t\t\t\t\t\t\t\t\timage={image2}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t\t\t<Grid item xs={12} md={6}>\n\t\t\t\t\t\t\t\t\t<Box display=\"flex\" justifyContent=\"center\">\n\t\t\t\t\t\t\t\t\t\tPoints: {player1Points}\n\t\t\t\t\t\t\t\t\t</Box>\n\t\t\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t\t\t<Grid item xs={12} md={6}>\n\t\t\t\t\t\t\t\t\t<Box display=\"flex\" justifyContent=\"center\">\n\t\t\t\t\t\t\t\t\t\tPoints: {player2Points}\n\t\t\t\t\t\t\t\t\t</Box>\n\t\t\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t</>\n\t\t\t\t\t)}\n\t\t\t\t\t<Box display=\"flex\" justifyContent=\"center\">\n\t\t\t\t\t\t<Button variant=\"contained\" color=\"primary\" onClick={() => setPlayers(getRandomPlayers(contestants, type))}>\n\t\t\t\t\t\t\tFight Again!\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t</Box>\n\t\t\t\t</>\n\t\t\t)}\n\t\t</Layout>\n\t);\n};\n\nexport default Duel;\n","export const getRandomNumber = (num: number) => {\n\treturn Math.floor(Math.random() * num);\n};\n","import React from 'react';\nimport Layout from '../components/Layout';\n\nconst PageNotFound: React.FC = () => (\n\t<Layout>\n\t\t<p>404 sorry, this page does not exist</p>\n\t</Layout>\n);\n\nexport default PageNotFound;\n","import React from 'react';\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom';\nimport Homepage from './screens/Homepage';\nimport Duel from './screens/Duel';\nimport PageNotFound from './screens/PageNotFound';\nimport { ContestantType } from './types/types';\n\nconst App: React.FC = () => {\n\treturn (\n\t\t<Router>\n\t\t\t<Switch>\n\t\t\t\t<Route exact path=\"/\">\n\t\t\t\t\t<Homepage />\n\t\t\t\t</Route>\n\t\t\t\t<Route path=\"/heroes\">\n\t\t\t\t\t<Duel type={ContestantType.HEROES} />\n\t\t\t\t</Route>\n\t\t\t\t<Route path=\"/starships\">\n\t\t\t\t\t<Duel type={ContestantType.STARSHIPS} />\n\t\t\t\t</Route>\n\t\t\t\t<Route path=\"*\">\n\t\t\t\t\t<PageNotFound />\n\t\t\t\t</Route>\n\t\t\t</Switch>\n\t\t</Router>\n\t);\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}